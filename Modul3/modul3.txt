Keg 1
1.
su - student | ini split kanan kiri

2. 
mkdir /home/student/bin
ls -> cek directory

cd /home/student/bin

nano killing -> trs tulis code yg di modul

#!/bin/bash
while true;do
	echo -n "$@" >> ~/killing_outfile
	sleep 5
done

ctrl + x 
y enter

chmod +x killing

3.
./killing network &
./killing interface &
./killing connection &

- kerja dibalik layar, intinya untuk mematikan program tapi dijalankan di latar belakang agar kita bisa menjalankan perintah lain tanpa menunggunya selesai

4. TERMINAL KANAN
tail -f /home/student/killing_outfile

- memantau output secara realtime, pokonya apa aja yg dionfigurasi trs mau cek update an nya disini

5.
jobs -l -> u melihat daftar yg sedang berjalan + PID nya 

6. 
kill -SIGSTOP %1 -> menangguhkan proses, tidak dapat diblokir/di handle (masih ada cuma berhenti dia)?
jobs -l 
trs lakukan langkah 4 untuk cek apakah sudah berhenti/belum

7.
kill -SIGTERM %2 -> cara yg sopan untuk meminta program berhenti (terminate)
lakukan step ke 6 langkah 2

8.
kill -SIGCONT %1 -> untuk melanjutkan proses, jika proses berhenti maka gabisa di blokir 
lakukan step 7 bagian 2

9.
kill -SIGTERM %1
kill -SIGRERM %3
jobs -l
tail -f /home/student/killing_outfile

10.
ps -ef | grep tail
pkill -SIGTERM tail

cek di terminal kiri

cd /home/student
rm killing_outfile

-----------------
Keg 2
1.
ini directory nya dah ada

2. 
nano /home/student/bin/monitor -> enter, trs tulis code, ctrl x, y, enter

#!/bin/bash
while true; do
	var=1
	while [[ var -lt 600000 ]]; do
		var=$(($var+1))
	done
	sleep 1
done

chmod +x /home/student/bin/monitor

3.
top = menunjukkan kinerja dan statistik server

ada jam = waktu aktual server

up 67 = ini berarti server aktif berapa menit yg lalu 

user = brpp banyak user yg login

load avarege = rata2 cpu dalam 1, 5, 15 menit 

sleeping = task yg disisihkan, / yg sedang menunggu input/output 

zoombie = task yg sudah selesai di eksekusi namun masih berada dalam tabel proses

4.
lscpu -> u memberikan nomor logic cpu

5.
/home/student/bin/monitor & -> catat PID monitor

6.
top

7.
/home/student/bin/monitor & -> catat PID monitor

8.
top

9.
/home/student/bin/monitor & -> catat PID monitor

10.
top

11.
uptime

12. 
press Q

14. 
killall monitor

-------------------
Keg 3 -> mengoptimalkan kinerja sistem 
2. 
sudo yum install tuned -> install tuned package

sudo systemctl is-enabled tuned -> servis yg diijinkan

sudo systemctl is-active tuned -> servis yg sedang berjalan

3.
sudo tuned-adm list -> menampilkan daftar tuning profile yang tersedia dan profile yang sedang aktif

4. tuned-adm mengaktifkan profil tuning yang telah disediakan
sudo tuned-adm active -> cek virtual yg aktif

sudo tuned-adm profile powersave -> mengubah tunning aktif

sudo tuned-adm active

5.
exit

--------------
keg 4
2. TERMINAL KANAN
grep -c processor /proc/cpuinfo -> cek jumlah virtual prosesor

TERMINAL KIRI
for i in $(seq 1 jumlah core cpu); do sha1sum /dev/zero & done

looping yg akan dieksekusi sebanyak jumlah core cpu yg ada pada sistem

& menjalankan perintah di latar belakang

3.
jobs -> cek background jobs yg sedang berjalan

4.
ps -ef | grep sha1sum -> cek PID

ps = proses status

ps -eo pid,%cpu,cmd | grep sha1sum -> cek pid + presentase cpu

eo = u menampilkan pid, presentase cpu, dan command yg dijalankan oleh proses

grep sha1sum = perintah untuk mencari kata sha1sum dalam output yg dihasilkan oleh perintah ps

5.
pkill sha1sum

6.
for i in $(seq 1 3); do sha1sum /dev/zero & done

TERMINAL KANAN
for i in $(seq 1 4); do nice -n 10 sha1sum /dev/zero & done -> tapi dirubah yang terakhir

7. TERMINAL KIRI
ps -eo pid,pcpu,nice,comm | grep sha1sum

8.
sudo renice -n 5 -p [pid] -> levelnya jadi 5 -> masukin 4 kali 

9.
pgrep -n sha1sum -> u cek pid yang akan diturunkan level nya

10.
pkill sha1sum 

jobs
